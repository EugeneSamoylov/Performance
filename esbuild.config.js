import esbuild from 'esbuild';
import fs from 'fs';
import { promisify } from 'util';

const copyFile = promisify(fs.copyFile);
const rm = promisify(fs.rm);
const mkdir = promisify(fs.mkdir);
const readFile = promisify(fs.readFile);
const writeFile = promisify(fs.writeFile);

const build = async () => {
  try {
    // üî• –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–±–æ—Ä–∫–∏
    if (fs.existsSync('dist')) {
      await rm('dist', { recursive: true, force: true });
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏
    await mkdir('dist', { recursive: true });
    await mkdir('dist/assets', { recursive: true });
    await mkdir('dist/vendors', { recursive: true });

    // –ö–æ–ø–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã
    if (fs.existsSync('assets')) {
      fs.cpSync('assets', 'dist/assets', { recursive: true });
    }
    
    // –ö–æ–ø–∏—Ä—É–µ–º –í–°–ï –≤–µ–Ω–¥–æ—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if (fs.existsSync('vendors')) {
      fs.cpSync('vendors', 'dist/vendors', { recursive: true });
    }

    // –ö–æ–ø–∏—Ä—É–µ–º —à—Ä–∏—Ñ—Ç—ã
    if (fs.existsSync('lato.woff2')) {
      await copyFile('lato.woff2', 'dist/lato.woff2');
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º HTML
    let html = await readFile('index.html', 'utf-8');
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
    const scriptStart = html.indexOf('<script type="text/babel">') + 27;
    const scriptEnd = html.indexOf('</script>', scriptStart);
    const scriptContent = html.substring(scriptStart, scriptEnd).trim();
    
    await mkdir('src', { recursive: true });
    await writeFile('src/app.js', scriptContent);
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–∫—Ä–∏–ø—Ç—ã
    html = html.replace(
      /<script type="text\/babel">[\s\S]*?<\/script>/,
      ''
    );
    html = html.replace(
      '<script src="vendors/babel.min.js"></script>',
      ''
    );
    
    // –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ CDN-–≤–µ—Ä—Å–∏—é React (—É–∂–µ –º–∏–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é)
    html = html.replace(
      '<script src="vendors/react-with-dom.js"></script>',
      `<script src="https://unpkg.com/react@18.2.0/umd/react.production.min.js"></script>
       <script src="https://unpkg.com/react-dom@18.2.0/umd/react-dom.production.min.js"></script>`
    );
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –∏ preload
    html = html.replace(
      '</title>',
      `</title>
       <link rel="preload" href="./bundle.min.js" as="script">
       <link rel="preload" href="./styles.min.css" as="style">
       <link rel="preload" href="./lato.woff2" as="font" crossorigin>`
    );
    
    html = html.replace(
      '</body>',
      '<script src="./bundle.min.js"></script></body>'
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç–∏ CSS
    html = html.replace(
      'href="reset.css"',
      'href="./reset.min.css"'
    );
    html = html.replace(
      'href="styles.css"',
      'href="./styles.min.css"'
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ —à—Ä–∏—Ñ—Ç—É
    html = html.replace(
      'href="assets/lato.woff2"',
      'href="./lato.woff2"'
    );
    
    await writeFile('dist/index.html', html);

    // –°–æ–±–∏—Ä–∞–µ–º JS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    await esbuild.build({
      entryPoints: ['src/app.js'],
      bundle: true,
      minify: true,
      treeShaking: true,
      outfile: 'dist/bundle.min.js',
      loader: {
        '.js': 'jsx'
      },
      define: {
        'process.env.NODE_ENV': '"production"'
      },
      jsxFactory: 'React.createElement',
      jsxFragment: 'React.Fragment'
    });

    // –°–æ–±–∏—Ä–∞–µ–º CSS
    await esbuild.build({
      entryPoints: ['reset.css'],
      minify: true,
      outfile: 'dist/reset.min.css',
      loader: { '.css': 'css' }
    });

    await esbuild.build({
      entryPoints: ['styles.css'],
      minify: true,
      outfile: 'dist/styles.min.css',
      loader: { '.css': 'css' }
    });

    console.log('‚úÖ –°–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–∞! –û—Ç–∫—Ä–æ–π—Ç–µ dist/index.html');
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log(`
    –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:
    1. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ WebP:
       npx @squoosh/cli --webp '{"quality":65}' dist/assets/*.png
    
    2. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ SVG:
       npx svgo dist/assets/*.svg
       
    3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–º–µ—Ä—ã —Å–±–æ—Ä–∫–∏:
       du -sh dist/* | sort -hr
    `);
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏:', e);
    process.exit(1);
  }
};

build();